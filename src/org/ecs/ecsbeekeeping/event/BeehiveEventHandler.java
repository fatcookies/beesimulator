package org.ecs.ecsbeekeeping.event;

import org.ecs.ecsbeekeeping.event.bee.*;
import org.ecs.ecsbeekeeping.event.flower.FlowerPollenEvent;
import org.ecs.ecsbeekeeping.event.flower.NewFlowerEvent;
import org.ecs.ecsbeekeeping.event.hive.HiveFoodEvent;
import org.ecs.ecsbeekeeping.event.hive.HiveNewBeeEvent;

import java.io.PrintWriter;
import java.util.Observable;
import java.util.Observer;

/**
 * An Observer which listens to all the events generated by the garden and handles each one
 * By printing a description of each event to the console
 */
public class BeehiveEventHandler implements Observer {

    /**
     * The current day of the simulation. Initialised to 1 as first day happens automatically
     */
    private int day = 1;

    /**
     * The PrintWriter used to write the logs to
     */
    private PrintWriter logWriter;

    /**
     * Update method which is called every time an observable produces an event
     *
     * @param observable The Observable which created the event
     * @param o          The event
     * @see Observer#update(java.util.Observable, Object)
     */
    @Override
    public void update(Observable observable, Object o) {
        String toOutput = "";

        if (o instanceof AnotherDayEvent) {
            day++;
            toOutput = "\n\n\n=========== Day " + day + " ===========";

        } else if (o instanceof BeeDeathEvent) {
            BeeDeathEvent event = (BeeDeathEvent) o;
            String name = event.getBeeName();

            toOutput = name + " just died :(";

        } else if (o instanceof BeeEatEvent) {
            BeeEatEvent event = (BeeEatEvent) o;
            String name = event.getBeeName();
            int amount = event.getFoodChange();
            int type = event.getFoodType();
            String food = event.getFoodName();

            toOutput = name + " ate " + amount + " " + food;

        } else if (o instanceof BeeHealthEvent) {
            BeeHealthEvent event = (BeeHealthEvent) o;
            int change = event.getHealthChange();

            if (change >= 0) {
                toOutput = event.getBeeName() + " gained " + change + " health";
            } else {
                toOutput = event.getBeeName() + " lost " + change * -1 + " health";
            }
        } else if (o instanceof BeeMiscEvent) {
            BeeMiscEvent event = (BeeMiscEvent) o;

            toOutput = event.getBeeName() + " " + event.getDescription();

        } else if (o instanceof BeeWorkEvent) {
            BeeWorkEvent event = (BeeWorkEvent) o;

            toOutput = event.getBeeName() + " got " + event.getPollenCollected() + " pollen from the hive";

        } else if (o instanceof FlowerPollenEvent) {
            FlowerPollenEvent event = (FlowerPollenEvent) o;
            int amount = event.getPollenChange();

            if (amount > 0) {
                toOutput = event.getFlowerName() + " grew and gained " + amount + " pollen";
            } else {
                toOutput = -1 * amount + " pollen extracted from " + event.getFlowerName();
            }

        } else if (o instanceof HiveFoodEvent) {
            HiveFoodEvent event = (HiveFoodEvent) o;
            int amount = event.getChange();

            if (amount >= 0) {
                toOutput = amount + " " + event.getFoodName() + " was added to the hive";
            } else {
                toOutput = -1 * amount + " " + event.getFoodName() + " was taken from the hive";
            }

        } else if (o instanceof HiveNewBeeEvent) {
            HiveNewBeeEvent event = (HiveNewBeeEvent) o;
            toOutput = "A " + event.getNewBee().getName() + " was added to the hive";

        } else if (o instanceof NewBeeEvent) {
            NewBeeEvent event = (NewBeeEvent) o;
            toOutput = "A new " + event.getBeeName() + " was made";

        } else if (o instanceof NewFlowerEvent) {
            NewFlowerEvent event = (NewFlowerEvent) o;
            toOutput = "A new " + event.getFlowerName() + " was grown";

        } else {
            System.err.println("Unhandled event from " + o.getClass().getName());
        }

        // This handler simply prints out the event descriptions to the console
        System.out.println(toOutput);

        // Write the descriptions to log file if specified
        if (logWriter != null) {
            logWriter.println(toOutput);
            logWriter.flush();
        }
    }

    public void setLogWriter(PrintWriter writer) {
        this.logWriter = writer;
    }
}
